/*!
@fileoverview mathform - A collection of mathematical formulas, constants and algorithms
@author Alexandros Diamantonis <asdiamantonis@gmail.com>
@version 0.0.1

Copyright (c) 2022, Alexandros Diamantonis <asdiamantonis@gmail.com>.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
class t{static area(t){return Math.PI*t**2}static circumference(t){return 2*Math.PI*t}static diameter(t){return 2*t}static radiusFromArea(t){return Math.sqrt(t/Math.PI)}static radiusFromCircumference(t){return t/(2*Math.PI)}static radiusFromDiameter(t){return t/2}_isGreaterThanZero(t,r){if(t<0)throw new Error(`${r} must be greater than 0.`)}}class r{static area(t,r){return.5*t*r}static hypotenuse(t,r){return Math.sqrt(t**2+r**2)}static isRight(t,r,e){return e**2===t**2+r**2}}class e{static lateralArea(t,r){return 2*Math.PI*t*r}static totalArea(r,a){return e.Area(r,a)+2*t.Area(r)}static volume(t,r){return Math.PI*t**2*r}}var a=Object.freeze({__proto__:null,Circle:t,Triangle:r,Rectangle:class{static area(t,r){return t*r}static circumference(t,r){return 2*t+2*r}static diagonal(t,e){return r.Hypotenuse(t,e)}static isSquare(t,r){return t===r}},Cone:class{static slantHeight(t,e){return r.Hypotenuse(t,e)}static lateralArea(t,r){return Math.PI*t*this.SlantHeight(t,r)}static totalArea(r,e){return this.LateralArea(r,e)+t.Area(r)}static volume(t,r){return 1/3*Math.PI*t**2*r}},Cylinder:e,Sphere:class{static surfaceArea(t){return 4*Math.PI*t**2}static volume(t){return 4/3*Math.PI*t**3}}});function s(t,r=2){return parseFloat(parseFloat(t).toFixed(r))}export{s as format,a as geometry};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
