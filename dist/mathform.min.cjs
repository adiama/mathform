/*!
@fileoverview mathform - A collection of mathematical formulas, constants and algorithms
@author Alexandros Diamantonis <asdiamantonis@gmail.com>
@version 0.0.1

Copyright (c) 2022, Alexandros Diamantonis <asdiamantonis@gmail.com>.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
function e(e,t){if(!(e instanceof t))throw new TypeError('Cannot call a class as a function')}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,'value'in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),Object.defineProperty(e,'prototype',{writable:!1}),e}Object.defineProperty(exports,'__esModule',{value:!0});var r=function(){function t(){e(this,t)}return n(t,[{key:'_isGreaterThanZero',value:function(e,t){if(e<0)throw new Error(''.concat(t,' must be greater than 0.'))}}],[{key:'area',value:function(e){return Math.PI*Math.pow(e,2)}},{key:'circumference',value:function(e){return 2*Math.PI*e}},{key:'diameter',value:function(e){return 2*e}},{key:'radiusFromArea',value:function(e){return Math.sqrt(e/Math.PI)}},{key:'radiusFromCircumference',value:function(e){return e/(2*Math.PI)}},{key:'radiusFromDiameter',value:function(e){return e/2}}]),t}(),u=function(){function t(){e(this,t)}return n(t,null,[{key:'area',value:function(e,t){return.5*e*t}},{key:'hypotenuse',value:function(e,t){return Math.sqrt(Math.pow(e,2)+Math.pow(t,2))}},{key:'isRight',value:function(e,t,n){return Math.pow(n,2)===Math.pow(e,2)+Math.pow(t,2)}}]),t}(),a=function(){function t(){e(this,t)}return n(t,null,[{key:'area',value:function(e,t){return e*t}},{key:'circumference',value:function(e,t){return 2*e+2*t}},{key:'diagonal',value:function(e,t){return u.Hypotenuse(e,t)}},{key:'isSquare',value:function(e,t){return e===t}}]),t}(),o=function(){function t(){e(this,t)}return n(t,null,[{key:'slantHeight',value:function(e,t){return u.Hypotenuse(e,t)}},{key:'lateralArea',value:function(e,t){return Math.PI*e*this.SlantHeight(e,t)}},{key:'totalArea',value:function(e,t){return this.LateralArea(e,t)+r.Area(e)}},{key:'volume',value:function(e,t){return 1/3*Math.PI*Math.pow(e,2)*t}}]),t}(),i=function(){function t(){e(this,t)}return n(t,null,[{key:'lateralArea',value:function(e,t){return 2*Math.PI*e*t}},{key:'totalArea',value:function(e,n){return t.Area(e,n)+2*r.Area(e)}},{key:'volume',value:function(e,t){return Math.PI*Math.pow(e,2)*t}}]),t}(),l=function(){function t(){e(this,t)}return n(t,null,[{key:'surfaceArea',value:function(e){return 4*Math.PI*Math.pow(e,2)}},{key:'volume',value:function(e){return 4/3*Math.PI*Math.pow(e,3)}}]),t}(),c=Object.freeze({__proto__:null,Circle:r,Triangle:u,Rectangle:a,Cone:o,Cylinder:i,Sphere:l});exports.format=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return parseFloat(parseFloat(e).toFixed(t))},exports.geometry=c;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
